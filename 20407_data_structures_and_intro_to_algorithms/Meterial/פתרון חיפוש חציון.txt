#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
	int * arr;
	int start;
	int end;
} node;

int nodeSize(node * n);
void func(node * x,node * y,node * z);
int nodeMidValue(node * n);
void removeStart(node * n);
void removeEnd(node * n);


void main()
{
	node z,y,x;
	int i;
	int arr1[10000];
	int arr2[10000];
	int arr3[10000];

	for (i=0;i<10000;i++)
	{
		arr1[i]=i+0;
		arr2[i]=i+10000;
		arr3[i]=i+20000;
	}
	//int arr1[20] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
	//int arr3[20] = {21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40};
	//int arr2[20] = {41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60};
	
	//int arr1[20] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
	//int arr3[20] = {21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40};
	//int arr2[20] = {41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60};
	
	x.arr = arr1;
	y.arr = arr2;
	z.arr = arr3;
	x.start = y.start = z.start = 0;
	x.end = y.end = z.end = 9999;

	func(&x,&y,&z);
	
}

void func(node * x,node * y,node * z)
{
	int midX,midY,midZ;
	
	if(nodeSize(x)==0 && nodeSize(y)==0)
	{
		  printf ("%d\n",nodeMidValue(z));
		  exit(1);
	}
	if(nodeSize(x)==0 && nodeSize(z)==0)
	{
		  printf ("%d\n",nodeMidValue(y));
		  exit(1);
	}
	if(nodeSize(y)==0 && nodeSize(z)==0)
	{
		  printf ("%d\n",nodeMidValue(x));
		  exit(1);
	}
	
	if (nodeMidValue(x) == nodeMidValue(y))
	{ 
		printf ("%d\n",nodeMidValue(x));
		exit(1);
	}
	if (nodeMidValue(x) == nodeMidValue(z))
	{ 
		printf ("%d\n",nodeMidValue(x));
		exit(1);
	}
	if (nodeMidValue(y) == nodeMidValue(z))
	{ 
		printf ("%d\n",nodeMidValue(y));
		exit(1);
	}
	
	midX=nodeMidValue(x);
	midY=nodeMidValue(y);
	midZ=nodeMidValue(z);
	
	if (((midX < midY) && (midX < midZ)))
	{
		removeStart(x);
	}
	else if (((midY < midX) && (midY < midZ)))
	{
		removeStart(y);
	}
	else if (((midZ < midX) && (midZ < midY)))
	{
		removeStart(z);
	}

	if (((midX > midY) && (midX > midZ)))
	{
		removeEnd(x);
	}
	else if (((midY > midX) && (midY > midZ)))
	{
		removeEnd(y);
	}
	else if (((midZ > midX) && (midZ > midY)))
	{
		removeEnd(z);
	}
	printf ("another enterence to the func\n");
	func(x,y,z);
}

int nodeSize(node * n)
{
	return ((n->end) - (n->start)); 
}

int nodeMidValue(node * n)
{
	if ((nodeSize(n)%2)==0) //Ezugi
		return (n->arr[(n->start + n->end)/2]);
	else
		return (((n->arr[(n->start + n->end)/2]) + (n->arr[(n->start + n->end)/2+1]))/2);
}

int findMid(node * n)
{
	if ((nodeSize(n)%2)==0) //Ezugi
		return((n->start + n->end)/2);
	else
	{
		return(((n->start + n->end)/2));
		
	}
}

void removeStart(node * n)
{
	if (nodeSize(n)==1)
		n->start = findMid(n) + 1;
	else
		n->start = findMid(n);
}

void removeEnd(node * n)
{
	
	n->end = findMid(n);
}