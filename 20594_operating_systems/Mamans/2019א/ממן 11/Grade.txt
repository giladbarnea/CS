########################################################################################################################################
## 

For OS students,
Following is a list of typical errors encountered in the assignments submitted by the course students. 
While it might be, that your work has no problems from the mentioned bellow, you can find it educational to read the list.

1. Please don't submit extra files like executable files etc'. Also extra foldering is really unnecessary.
   Next times I'll penalize for it.
2. Name of the make file MUST be Makefile or makefile only, no extensions.
   Please verify that 'make' instruction compiles all the files (exe/lib) required by the certain maman.
3. Name of executable file MUST conform the name required at maman description.
4. Submit SINGLE ZIP file for the whole maman (including theory and the programming task).
5. Theory: please submit SINGLE doc/rtf/pdf. English language is preferable. 
   It can be uploaded at the same ZIP as the programming task as it have been mentioned above.
6. Maman11 won't be penalized for late submission. Next mamans: 2 points of penalty for each extra day (except Sat).
7. Please read very careful the maman description before start working on it.
8. The programming task MUST be compiled and tested before the submission on the same OS version and same GCC as it mentioned in the coures requirements.
   Othervise in some cases it may cause crash and improper behavior on my machine.
   

Good luck at OS course.

Regards, Grader.

########################################################################################################################################

Programming task(70%):

Well Done


theoretical task(30%):
2 10%  ok
3 5%   ok
4 5%   ok
5 5%   ok



============================================================================

Answers:


Question 2:
1) The TRAP instruction switches from user mode to kernel mode and starts execution at fix 
address within the kernel once the system call handler has completed its task the control 
may be returned to the user mode by the TRAP instruction
An interrupt is an asynchronous signal from hardware indicating the need for attention or 
a synchronous event in software indicating the need for a change in execution. A hardware i
nterrupt causes the processor to save its state of execution via a context switch, and begin 
execution of an interrupt handler. Software interrupts are usually implemented as instructions 
in the instruction set, which cause a context switch to an interrupt handler similar to a 
hardware interrupt. TRAPS are used by a program to invoke system calls and switch to 
kernel mode and back. 
2) The parameters for write are stored in register. Then a TRAP instruction is sent,giving control 
to the operating system so now we are in kernel mode. Then the system can perform IO. 
3) Write - is a system call that is costly (it swings to kernel mode). printf() takes a string, 
and transfers a formatted sequence of bytes to write using the stdout.

Question 3:
--------------------------------------------
The solution violates condition 3: a process outside its critical section will not prevent another 
process from entering its critical section. This condition is violated because there may be a case 
where process 0 will be in the critical section, terminate it, and change the turn variable to 1. 
But process 1 will still be in a non-critical section, and meanwhile process 0 again wants to perform the critical segment. 
If so, process 0 can not perform the critical segment because turn = 1, 
although process 1 is not currently using the critical section!


Question 4:
--------------------------------------------
The article has two reasons why Pthreads does not formally describe the memory model and the semantics of parallelism: 
1. Formal descriptions are not readable to most programmers. 
2. Much of what was written about the memory was written about the hardware and not about the programmer.
However, device developers explain that the memory model is that two processes must not access the same memory space at the same time. 
Such mutual prevention will be done by means of functions intended for this purpose.


Question 5:
Peterson solution.
--------------------------------------------
  
According to Peterson solution, the critical part is final and the process that goes in will go 
out and let another process go in. Also the processes are generous, so when a process goes 
in, it checks if there is another process that want to go in. Moreover, the process will not wait an 
infinite time to enter the critical section, because the process that now in critical section makes it's 
logic while the other process makes a busy wait on the while loop, and in the moment that the process 
in critical section call leaveCriticalSection function, the waiting process immediately will enter the 
critical section, because one of the while condition (interested[otherProcess]) will become false, end 
the waiting process will enter the critical section.This time won't be infinite, and will not cause 
starvation of the waiting in the while loop process, because there is an assumption that the process 
that in the critical section will make it's instructions in final time (and not infinite).


============================================================================

/home/user/2018B/maman11/Unchecked/2019a-20594-11-205480072-20-1
gcc -Wall  -L./ -m32  -c binsem.c
ar rcu libbinsem.a binsem.o
ar: `u' modifier ignored since `D' is the default (see `U')
ranlib libbinsem.a 
rm -f binsem.o
gcc -Wall  -L./ -m32  -c ut.c
ar rcu libut.a ut.o
ar: `u' modifier ignored since `D' is the default (see `U')
ranlib libut.a 
rm -f ut.o
gcc -Wall  -L./ -m32 ph.c -lbinsem -lut -o ph
2019a-20594-11-205480072-20-2.doc
atomic.h
binsem.c
binsem.h
Grade.txt
libbinsem.a
libgtest.a
libut.a
Makefile
Makefile.1
ph
ph.c
ph.mk
test_main.cpp
test_run
ut.c
ut.h

=====================================================================

gcc -Wall -g -L./  -c binsem.c
ar rcu libbinsem.a binsem.o
ar: `u' modifier ignored since `D' is the default (see `U')
ranlib libbinsem.a 
gcc -Wall -g -L./  -c ut.c
ar rcu libut.a ut.o
ar: `u' modifier ignored since `D' is the default (see `U')
ranlib libut.a 

=====================================================================

=====================================================================

./test_run
Running main() from gtest_main.cc
[==========] Running 7 tests from 2 test cases.
[----------] Global test environment set-up.
[----------] 3 tests from BinsimTest
[ RUN      ] BinsimTest.binsem_init
[       OK ] BinsimTest.binsem_init (0 ms)
[ RUN      ] BinsimTest.binsem_up
[       OK ] BinsimTest.binsem_up (0 ms)
[ RUN      ] BinsimTest.binsem_down
[       OK ] BinsimTest.binsem_down (0 ms)
[----------] 3 tests from BinsimTest (0 ms total)

[----------] 4 tests from UtTest
[ RUN      ] UtTest.ut_init
[       OK ] UtTest.ut_init (7 ms)
[ RUN      ] UtTest.ut_spawn_thread
[       OK ] UtTest.ut_spawn_thread (0 ms)
[ RUN      ] UtTest.ut_start
Press CTRL-C to print the statistics and terminate
test_main.cpp:183: Failure
Value of: ut_start()
  Actual: 0
Expected: -1
test_main.cpp:184: Failure
Value of: gWasAlarmCalled
  Actual: 1
Expected: 0
test_main.cpp:185: Failure
Value of: gWasTimerCalled
  Actual: 1
Expected: 0
Press CTRL-C to print the statistics and terminate
test_main.cpp:191: Failure
Value of: gWasAlarmCalled
  Actual: 2
Expected: 1
test_main.cpp:192: Failure
Value of: gWasTimerCalled
  Actual: 2
Expected: 1
[  FAILED  ] UtTest.ut_start (0 ms)
[ RUN      ] UtTest.ut_get_vtime
Press CTRL-C to print the statistics and terminate
in signal handler: switching from 0 to 1
in signal handler: switching from 1 to 0
[       OK ] UtTest.ut_get_vtime (0 ms)
[----------] 4 tests from UtTest (8 ms total)

[----------] Global test environment tear-down
[==========] 7 tests from 2 test cases ran. (9 ms total)
[  PASSED  ] 6 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] UtTest.ut_start




=====================================================================



-------------

Executing: ./test_run 


============= running test_run ============================

Running main() from gtest_main.cc
[==========] Running 7 tests from 2 test cases.
[----------] Global test environment set-up.
[----------] 3 tests from BinsimTest
[ RUN      ] BinsimTest.binsem_init
[       OK ] BinsimTest.binsem_init (0 ms)
[ RUN      ] BinsimTest.binsem_up
[       OK ] BinsimTest.binsem_up (0 ms)
[ RUN      ] BinsimTest.binsem_down
[       OK ] BinsimTest.binsem_down (0 ms)
[----------] 3 tests from BinsimTest (0 ms total)

[----------] 4 tests from UtTest
[ RUN      ] UtTest.ut_init
[       OK ] UtTest.ut_init (4 ms)
[ RUN      ] UtTest.ut_spawn_thread
[       OK ] UtTest.ut_spawn_thread (0 ms)
[ RUN      ] UtTest.ut_start
Press CTRL-C to print the statistics and terminate
test_main.cpp:183: Failure
Value of: ut_start()
  Actual: 0
Expected: -1
test_main.cpp:184: Failure
Value of: gWasAlarmCalled
  Actual: 1
Expected: 0
test_main.cpp:185: Failure
Value of: gWasTimerCalled
  Actual: 1
Expected: 0
Press CTRL-C to print the statistics and terminate
test_main.cpp:191: Failure
Value of: gWasAlarmCalled
  Actual: 2
Expected: 1
test_main.cpp:192: Failure
Value of: gWasTimerCalled
  Actual: 2
Expected: 1
[  FAILED  ] UtTest.ut_start (1 ms)
[ RUN      ] UtTest.ut_get_vtime
Press CTRL-C to print the statistics and terminate
in signal handler: switching from 0 to 1
in signal handler: switching from 1 to 0
[       OK ] UtTest.ut_get_vtime (0 ms)
[----------] 4 tests from UtTest (5 ms total)

[----------] Global test environment tear-down
[==========] 7 tests from 2 test cases ran. (6 ms total)
[  PASSED  ] 6 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] UtTest.ut_start

 1 FAILED TEST
=====================================================================
------Code-----
------alloc-----
ph.c:  s = (sem_t *)malloc (N * sizeof(sem_t));
ph.c:  phil_state = (int *) malloc (N * sizeof(int));
ph.c:  tid = (int *) malloc (N * sizeof(int));
ut.c:    trdTble = (ut_slot)calloc(++tab_size, sizeof(ut_slot_t));
ut.c:        fprintf(stderr, "Error allocating memory.\n");
ut.c:    str = (char *)calloc(STACKSIZE, sizeof(char));
ut.c:        fprintf(stderr, "Error allocating memory.\n");
------free-----
------open-----
------close-----
------fork-----
ph.c:void take_forks(int i){
ph.c:void put_forks(int i){
ph.c:    take_forks(i);
ph.c:    put_forks(i);
------wait-----
------signal-----
binsem.c:#include <signal.h>
binsem.c:    //If the semaphore was locked before, continue lock it and send alarm signal in order to unlock it.
binsem.c:            fprintf(stderr, "Error in sending SIGALRM signal.\n");
ph.c:#include <signal.h>
ph.c:  signal(SIGINT,int_handler);
ut.c:void handler(int signal)    //Handles signals
ut.c:    switch(signal)
ut.c:        case SIGALRM:       //Switching threads if alarm signal was sent
ut.c:        case SIGVTALRM:     //Adding run time if timer signal was sent
------SIGNAL-----


=====================================================================



------1-------

Executing: ./ph 1

Usage: ./ph N (N >=2)


------2-------

Executing: ./ph 2

Spawned thread #1
Spawned thread #2
Philosopher (0) - time 1543003472884 - is thinking
Philosopher (1) - time 1543003473885 - is thinking
Philosopher (1) - time 1543003474666 - is hungry
Philosopher (1) - time 1543003474666 - is eating
Philosopher (0) - time 1543003475669 - is hungry
Philosopher (1) - time 1543003476645 - is thinking
Philosopher (0) - time 1543003476669 - is eating
Philosopher (1) - time 1543003478042 - is hungry
Philosopher (0) - time 1543003478630 - is thinking
Philosopher (0) used the CPU 3.500 sec.
Philosopher (1) used the CPU 2.400 sec.


------32-------

Executing: ./ph 32

Spawned thread #1
Spawned thread #2
Spawned thread #3
Spawned thread #4
Spawned thread #5
Spawned thread #6
Spawned thread #7
Spawned thread #8
Spawned thread #9
Spawned thread #10
Spawned thread #11
Spawned thread #12
Spawned thread #13
Spawned thread #14
Spawned thread #15
Spawned thread #16
Spawned thread #17
Spawned thread #18
Spawned thread #19
Spawned thread #20
Spawned thread #21
Spawned thread #22
Spawned thread #23
Spawned thread #24
Spawned thread #25
Spawned thread #26
Spawned thread #27
Spawned thread #28
Spawned thread #29
Spawned thread #30
Spawned thread #31
Spawned thread #32
Philosopher (0) - time 1543003479971 - is thinking
Philosopher (1) - time 1543003480972 - is thinking
Philosopher (1) - time 1543003481781 - is hungry
Philosopher (1) - time 1543003481781 - is eating
Philosopher (2) - time 1543003481973 - is thinking
Philosopher (2) - time 1543003482372 - is hungry
Philosopher (3) - time 1543003482372 - is thinking
Philosopher (4) - time 1543003483373 - is thinking
Philosopher (4) - time 1543003483771 - is hungry
Philosopher (4) - time 1543003483771 - is eating
Philosopher (5) - time 1543003484374 - is thinking
Philosopher (6) - time 1543003485375 - is thinking
Philosopher (7) - time 1543003486375 - is thinking
Philosopher (7) - time 1543003487168 - is hungry
Philosopher (7) - time 1543003487168 - is eating
Philosopher (8) - time 1543003487376 - is thinking
Philosopher (9) - time 1543003488376 - is thinking
Philosopher (9) - time 1543003488774 - is hungry
Philosopher (9) - time 1543003488774 - is eating
Philosopher (10) - time 1543003489377 - is thinking
Philosopher (11) - time 1543003490377 - is thinking
Philosopher (11) - time 1543003491166 - is hungry
Philosopher (11) - time 1543003491166 - is eating
Philosopher (12) - time 1543003491378 - is thinking
Philosopher (12) - time 1543003492164 - is hungry
Philosopher (13) - time 1543003492164 - is thinking
Philosopher (14) - time 1543003493165 - is thinking
Philosopher (14) - time 1543003493958 - is hungry
Philosopher (14) - time 1543003493958 - is eating
Philosopher (15) - time 1543003494166 - is thinking
Philosopher (16) - time 1543003495166 - is thinking
Philosopher (17) - time 1543003496166 - is thinking
Philosopher (18) - time 1543003497167 - is thinking
Philosopher (19) - time 1543003498169 - is thinking
Philosopher (19) - time 1543003498560 - is hungry
Philosopher (19) - time 1543003498560 - is eating
Philosopher (20) - time 1543003499169 - is thinking
Philosopher (21) - time 1543003500170 - is thinking
Philosopher (0) used the CPU 0.900 sec.
Philosopher (1) used the CPU 1.0 sec.
Philosopher (2) used the CPU 0.400 sec.
Philosopher (3) used the CPU 1.0 sec.
Philosopher (4) used the CPU 0.900 sec.
Philosopher (5) used the CPU 1.0 sec.
Philosopher (6) used the CPU 1.0 sec.
Philosopher (7) used the CPU 1.0 sec.
Philosopher (8) used the CPU 1.0 sec.
Philosopher (9) used the CPU 1.0 sec.
Philosopher (10) used the CPU 1.0 sec.
Philosopher (11) used the CPU 1.0 sec.
Philosopher (12) used the CPU 0.800 sec.
Philosopher (13) used the CPU 1.0 sec.
Philosopher (14) used the CPU 1.0 sec.
Philosopher (15) used the CPU 1.0 sec.
Philosopher (16) used the CPU 1.0 sec.
Philosopher (17) used the CPU 1.0 sec.
Philosopher (18) used the CPU 1.0 sec.
Philosopher (19) used the CPU 1.0 sec.
Philosopher (20) used the CPU 0.900 sec.
Philosopher (21) used the CPU 0.800 sec.
Philosopher (22) used the CPU 0.0 sec.
Philosopher (23) used the CPU 0.0 sec.
Philosopher (24) used the CPU 0.0 sec.
Philosopher (25) used the CPU 0.0 sec.
Philosopher (26) used the CPU 0.0 sec.
Philosopher (27) used the CPU 0.0 sec.
Philosopher (28) used the CPU 0.0 sec.
Philosopher (29) used the CPU 0.0 sec.
Philosopher (30) used the CPU 0.0 sec.
Philosopher (31) used the CPU 0.0 sec.


------33-------

Executing: ./ph 33

Spawned thread #1
Spawned thread #2
Spawned thread #3
Spawned thread #4
Spawned thread #5
Spawned thread #6
Spawned thread #7
Spawned thread #8
Spawned thread #9
Spawned thread #10
Spawned thread #11
Spawned thread #12
Spawned thread #13
Spawned thread #14
Spawned thread #15
Spawned thread #16
Spawned thread #17
Spawned thread #18
Spawned thread #19
Spawned thread #20
Spawned thread #21
Spawned thread #22
Spawned thread #23
Spawned thread #24
Spawned thread #25
Spawned thread #26
Spawned thread #27
Spawned thread #28
Spawned thread #29
Spawned thread #30
Spawned thread #31
Spawned thread #32
Spawned thread #33
Philosopher (0) - time 1543003502073 - is thinking
Philosopher (1) - time 1543003503074 - is thinking
Philosopher (1) - time 1543003503869 - is hungry
Philosopher (1) - time 1543003503869 - is eating
Philosopher (2) - time 1543003504074 - is thinking
Philosopher (2) - time 1543003504458 - is hungry
Philosopher (3) - time 1543003504458 - is thinking
Philosopher (4) - time 1543003505458 - is thinking
Philosopher (4) - time 1543003505839 - is hungry
Philosopher (4) - time 1543003505839 - is eating
Philosopher (5) - time 1543003506458 - is thinking
Philosopher (6) - time 1543003507459 - is thinking
Philosopher (7) - time 1543003508459 - is thinking
Philosopher (7) - time 1543003509227 - is hungry
Philosopher (7) - time 1543003509227 - is eating
Philosopher (8) - time 1543003509459 - is thinking
Philosopher (9) - time 1543003510460 - is thinking
Philosopher (9) - time 1543003510863 - is hungry
Philosopher (9) - time 1543003510863 - is eating
Philosopher (10) - time 1543003511460 - is thinking
Philosopher (11) - time 1543003512461 - is thinking
Philosopher (11) - time 1543003513258 - is hungry
Philosopher (11) - time 1543003513258 - is eating
Philosopher (12) - time 1543003513461 - is thinking
Philosopher (12) - time 1543003514244 - is hungry
Philosopher (13) - time 1543003514244 - is thinking
Philosopher (14) - time 1543003515244 - is thinking
Philosopher (14) - time 1543003516036 - is hungry
Philosopher (14) - time 1543003516037 - is eating
Philosopher (15) - time 1543003516245 - is thinking
Philosopher (16) - time 1543003517245 - is thinking
Philosopher (17) - time 1543003518246 - is thinking
Philosopher (18) - time 1543003519247 - is thinking
Philosopher (19) - time 1543003520248 - is thinking
Philosopher (19) - time 1543003520645 - is hungry
Philosopher (19) - time 1543003520645 - is eating
Philosopher (20) - time 1543003521248 - is thinking
Philosopher (21) - time 1543003522248 - is thinking
Philosopher (0) used the CPU 0.900 sec.
Philosopher (1) used the CPU 1.0 sec.
Philosopher (2) used the CPU 0.400 sec.
Philosopher (3) used the CPU 1.0 sec.
Philosopher (4) used the CPU 1.0 sec.
Philosopher (5) used the CPU 1.0 sec.
Philosopher (6) used the CPU 1.0 sec.
Philosopher (7) used the CPU 1.0 sec.
Philosopher (8) used the CPU 1.0 sec.
Philosopher (9) used the CPU 1.0 sec.
Philosopher (10) used the CPU 1.0 sec.
Philosopher (11) used the CPU 1.0 sec.
Philosopher (12) used the CPU 0.800 sec.
Philosopher (13) used the CPU 0.900 sec.
Philosopher (14) used the CPU 1.0 sec.
Philosopher (15) used the CPU 1.0 sec.
Philosopher (16) used the CPU 1.0 sec.
Philosopher (17) used the CPU 1.0 sec.
Philosopher (18) used the CPU 1.0 sec.
Philosopher (19) used the CPU 1.0 sec.
Philosopher (20) used the CPU 1.0 sec.
Philosopher (21) used the CPU 0.900 sec.
Philosopher (22) used the CPU 0.0 sec.
Philosopher (23) used the CPU 0.0 sec.
Philosopher (24) used the CPU 0.0 sec.
Philosopher (25) used the CPU 0.0 sec.
Philosopher (26) used the CPU 0.0 sec.
Philosopher (27) used the CPU 0.0 sec.
Philosopher (28) used the CPU 0.0 sec.
Philosopher (29) used the CPU 0.0 sec.
Philosopher (30) used the CPU 0.0 sec.
Philosopher (31) used the CPU 0.0 sec.
Philosopher (32) used the CPU 0.0 sec.


------128-------

Executing: ./ph 128

Spawned thread #1
Spawned thread #2
Spawned thread #3
Spawned thread #4
Spawned thread #5
Spawned thread #6
Spawned thread #7
Spawned thread #8
Spawned thread #9
Spawned thread #10
Spawned thread #11
Spawned thread #12
Spawned thread #13
Spawned thread #14
Spawned thread #15
Spawned thread #16
Spawned thread #17
Spawned thread #18
Spawned thread #19
Spawned thread #20
Spawned thread #21
Spawned thread #22
Spawned thread #23
Spawned thread #24
Spawned thread #25
Spawned thread #26
Spawned thread #27
Spawned thread #28
Spawned thread #29
Spawned thread #30
Spawned thread #31
Spawned thread #32
Spawned thread #33
Spawned thread #34
Spawned thread #35
Spawned thread #36
Spawned thread #37
Spawned thread #38
Spawned thread #39
Spawned thread #40
Spawned thread #41
Spawned thread #42
Spawned thread #43
Spawned thread #44
Spawned thread #45
Spawned thread #46
Spawned thread #47
Spawned thread #48
Spawned thread #49
Spawned thread #50
Spawned thread #51
Spawned thread #52
Spawned thread #53
Spawned thread #54
Spawned thread #55
Spawned thread #56
Spawned thread #57
Spawned thread #58
Spawned thread #59
Spawned thread #60
Spawned thread #61
Spawned thread #62
Spawned thread #63
Spawned thread #64
Spawned thread #65
Spawned thread #66
Spawned thread #67
Spawned thread #68
Spawned thread #69
Spawned thread #70
Spawned thread #71
Spawned thread #72
Spawned thread #73
Spawned thread #74
Spawned thread #75
Spawned thread #76
Spawned thread #77
Spawned thread #78
Spawned thread #79
Spawned thread #80
Spawned thread #81
Spawned thread #82
Spawned thread #83
Spawned thread #84
Spawned thread #85
Spawned thread #86
Spawned thread #87
Spawned thread #88
Spawned thread #89
Spawned thread #90
Spawned thread #91
Spawned thread #92
Spawned thread #93
Spawned thread #94
Spawned thread #95
Spawned thread #96
Spawned thread #97
Spawned thread #98
Spawned thread #99
Spawned thread #100
Spawned thread #101
Spawned thread #102
Spawned thread #103
Spawned thread #104
Spawned thread #105
Spawned thread #106
Spawned thread #107
Spawned thread #108
Spawned thread #109
Spawned thread #110
Spawned thread #111
Spawned thread #112
Spawned thread #113
Spawned thread #114
Spawned thread #115
Spawned thread #116
Spawned thread #117
Spawned thread #118
Spawned thread #119
Spawned thread #120
Spawned thread #121
Spawned thread #122
Spawned thread #123
Spawned thread #124
Spawned thread #125
Spawned thread #126
Spawned thread #127
Spawned thread #128
Philosopher (0) - time 1543003524133 - is thinking
Philosopher (1) - time 1543003525134 - is thinking
Philosopher (1) - time 1543003525928 - is hungry
Philosopher (1) - time 1543003525928 - is eating
Philosopher (2) - time 1543003526134 - is thinking
Philosopher (2) - time 1543003526529 - is hungry
Philosopher (3) - time 1543003526529 - is thinking
Philosopher (4) - time 1543003527530 - is thinking
Philosopher (4) - time 1543003527925 - is hungry
Philosopher (4) - time 1543003527925 - is eating
Philosopher (5) - time 1543003528530 - is thinking
Philosopher (6) - time 1543003529531 - is thinking
Philosopher (7) - time 1543003530531 - is thinking
Philosopher (7) - time 1543003531316 - is hungry
Philosopher (7) - time 1543003531316 - is eating
Philosopher (8) - time 1543003531532 - is thinking
Philosopher (9) - time 1543003532533 - is thinking
Philosopher (9) - time 1543003532926 - is hungry
Philosopher (9) - time 1543003532926 - is eating
Philosopher (10) - time 1543003533534 - is thinking
Philosopher (11) - time 1543003534534 - is thinking
Philosopher (11) - time 1543003535331 - is hungry
Philosopher (11) - time 1543003535331 - is eating
Philosopher (12) - time 1543003535534 - is thinking
Philosopher (12) - time 1543003536349 - is hungry
Philosopher (13) - time 1543003536349 - is thinking
Philosopher (14) - time 1543003537349 - is thinking
Philosopher (14) - time 1543003538140 - is hungry
Philosopher (14) - time 1543003538140 - is eating
Philosopher (15) - time 1543003538350 - is thinking
Philosopher (16) - time 1543003539350 - is thinking
Philosopher (17) - time 1543003540350 - is thinking
Philosopher (18) - time 1543003541351 - is thinking
Philosopher (19) - time 1543003542351 - is thinking
Philosopher (19) - time 1543003542745 - is hungry
Philosopher (19) - time 1543003542745 - is eating
Philosopher (20) - time 1543003543352 - is thinking
Philosopher (21) - time 1543003544353 - is thinking
Philosopher (0) used the CPU 0.900 sec.
Philosopher (1) used the CPU 1.0 sec.
Philosopher (2) used the CPU 0.400 sec.
Philosopher (3) used the CPU 1.0 sec.
Philosopher (4) used the CPU 1.0 sec.
Philosopher (5) used the CPU 1.0 sec.
Philosopher (6) used the CPU 1.0 sec.
Philosopher (7) used the CPU 1.0 sec.
Philosopher (8) used the CPU 1.0 sec.
Philosopher (9) used the CPU 1.0 sec.
Philosopher (10) used the CPU 1.0 sec.
Philosopher (11) used the CPU 1.0 sec.
Philosopher (12) used the CPU 0.800 sec.
Philosopher (13) used the CPU 0.900 sec.
Philosopher (14) used the CPU 1.0 sec.
Philosopher (15) used the CPU 1.0 sec.
Philosopher (16) used the CPU 1.0 sec.
Philosopher (17) used the CPU 1.0 sec.
Philosopher (18) used the CPU 1.0 sec.
Philosopher (19) used the CPU 1.0 sec.
Philosopher (20) used the CPU 1.0 sec.
Philosopher (21) used the CPU 0.800 sec.
Philosopher (22) used the CPU 0.0 sec.
Philosopher (23) used the CPU 0.0 sec.
Philosopher (24) used the CPU 0.0 sec.
Philosopher (25) used the CPU 0.0 sec.
Philosopher (26) used the CPU 0.0 sec.
Philosopher (27) used the CPU 0.0 sec.
Philosopher (28) used the CPU 0.0 sec.
Philosopher (29) used the CPU 0.0 sec.
Philosopher (30) used the CPU 0.0 sec.
Philosopher (31) used the CPU 0.0 sec.
Philosopher (32) used the CPU 0.0 sec.
Philosopher (33) used the CPU 0.0 sec.
Philosopher (34) used the CPU 0.0 sec.
Philosopher (35) used the CPU 0.0 sec.
Philosopher (36) used the CPU 0.0 sec.
Philosopher (37) used the CPU 0.0 sec.
Philosopher (38) used the CPU 0.0 sec.
Philosopher (39) used the CPU 0.0 sec.
Philosopher (40) used the CPU 0.0 sec.
Philosopher (41) used the CPU 0.0 sec.
Philosopher (42) used the CPU 0.0 sec.
Philosopher (43) used the CPU 0.0 sec.
Philosopher (44) used the CPU 0.0 sec.
Philosopher (45) used the CPU 0.0 sec.
Philosopher (46) used the CPU 0.0 sec.
Philosopher (47) used the CPU 0.0 sec.
Philosopher (48) used the CPU 0.0 sec.
Philosopher (49) used the CPU 0.0 sec.
Philosopher (50) used the CPU 0.0 sec.
Philosopher (51) used the CPU 0.0 sec.
Philosopher (52) used the CPU 0.0 sec.
Philosopher (53) used the CPU 0.0 sec.
Philosopher (54) used the CPU 0.0 sec.
Philosopher (55) used the CPU 0.0 sec.
Philosopher (56) used the CPU 0.0 sec.
Philosopher (57) used the CPU 0.0 sec.
Philosopher (58) used the CPU 0.0 sec.
Philosopher (59) used the CPU 0.0 sec.
Philosopher (60) used the CPU 0.0 sec.
Philosopher (61) used the CPU 0.0 sec.
Philosopher (62) used the CPU 0.0 sec.
Philosopher (63) used the CPU 0.0 sec.
Philosopher (64) used the CPU 0.0 sec.
Philosopher (65) used the CPU 0.0 sec.
Philosopher (66) used the CPU 0.0 sec.
Philosopher (67) used the CPU 0.0 sec.
Philosopher (68) used the CPU 0.0 sec.
Philosopher (69) used the CPU 0.0 sec.
Philosopher (70) used the CPU 0.0 sec.
Philosopher (71) used the CPU 0.0 sec.
Philosopher (72) used the CPU 0.0 sec.
Philosopher (73) used the CPU 0.0 sec.
Philosopher (74) used the CPU 0.0 sec.
Philosopher (75) used the CPU 0.0 sec.
Philosopher (76) used the CPU 0.0 sec.
Philosopher (77) used the CPU 0.0 sec.
Philosopher (78) used the CPU 0.0 sec.
Philosopher (79) used the CPU 0.0 sec.
Philosopher (80) used the CPU 0.0 sec.
Philosopher (81) used the CPU 0.0 sec.
Philosopher (82) used the CPU 0.0 sec.
Philosopher (83) used the CPU 0.0 sec.
Philosopher (84) used the CPU 0.0 sec.
Philosopher (85) used the CPU 0.0 sec.
Philosopher (86) used the CPU 0.0 sec.
Philosopher (87) used the CPU 0.0 sec.
Philosopher (88) used the CPU 0.0 sec.
Philosopher (89) used the CPU 0.0 sec.
Philosopher (90) used the CPU 0.0 sec.
Philosopher (91) used the CPU 0.0 sec.
Philosopher (92) used the CPU 0.0 sec.
Philosopher (93) used the CPU 0.0 sec.
Philosopher (94) used the CPU 0.0 sec.
Philosopher (95) used the CPU 0.0 sec.
Philosopher (96) used the CPU 0.0 sec.
Philosopher (97) used the CPU 0.0 sec.
Philosopher (98) used the CPU 0.0 sec.
Philosopher (99) used the CPU 0.0 sec.
Philosopher (100) used the CPU 0.0 sec.
Philosopher (101) used the CPU 0.0 sec.
Philosopher (102) used the CPU 0.0 sec.
Philosopher (103) used the CPU 0.0 sec.
Philosopher (104) used the CPU 0.0 sec.
Philosopher (105) used the CPU 0.0 sec.
Philosopher (106) used the CPU 0.0 sec.
Philosopher (107) used the CPU 0.0 sec.
Philosopher (108) used the CPU 0.0 sec.
Philosopher (109) used the CPU 0.0 sec.
Philosopher (110) used the CPU 0.0 sec.
Philosopher (111) used the CPU 0.0 sec.
Philosopher (112) used the CPU 0.0 sec.
Philosopher (113) used the CPU 0.0 sec.
Philosopher (114) used the CPU 0.0 sec.
Philosopher (115) used the CPU 0.0 sec.
Philosopher (116) used the CPU 0.0 sec.
Philosopher (117) used the CPU 0.0 sec.
Philosopher (118) used the CPU 0.0 sec.
Philosopher (119) used the CPU 0.0 sec.
Philosopher (120) used the CPU 0.0 sec.
Philosopher (121) used the CPU 0.0 sec.
Philosopher (122) used the CPU 0.0 sec.
Philosopher (123) used the CPU 0.0 sec.
Philosopher (124) used the CPU 0.0 sec.
Philosopher (125) used the CPU 0.0 sec.
Philosopher (126) used the CPU 0.0 sec.
Philosopher (127) used the CPU 0.0 sec.
